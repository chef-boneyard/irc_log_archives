[2012-06-15 00:33:48 -0400] yfeldblum: hoover_damm, don't use leaky actions!
[2012-06-15 00:34:03 -0400] yfeldblum: hoover_damm, and mark the resource as updated_by_last_action(true) when the provider action takes action
[2012-06-15 00:34:35 -0400] ampledata: http://www.yourdailymedia.com/video/watch/1667/
[2012-06-15 00:34:41 -0400] ampledata: when your methods are leakin
[2012-06-15 00:35:06 -0400] hoover_damm: unless you have an example of what you want me to strive for
[2012-06-15 00:35:08 -0400] hoover_damm: i'm lost
[2012-06-15 00:35:17 -0400] hoover_damm: so please point me to examples.  I'm willing to up my game
[2012-06-15 00:37:52 -0400] yfeldblum: hoover_damm, so you know when you declare a resource inside a provider's action, the resource is simply added to the containing run-context's resources collection, and its actions are run after the provider's action method has completed running ... that's the default, but that's dumb, because provider actions should perform action against the system and not declare resources
[2012-06-15 00:38:15 -0400] yfeldblum: hoover_damm, but take a look at Chef::Provider#recipe_eval (https://github.com/opscode/chef/blob/master/chef/lib/chef/provider.rb#L63-79)
[2012-06-15 00:39:31 -0400] yfeldblum: hoover_damm, if you declare a resource inside that block, then it will actually be declared in a sub-run-context private to that call to recipe_eval and not in the parent run-context; plus, that sub-run-context will be completely converged before recipe_eval exits
[2012-06-15 00:39:46 -0400] yfeldblum: hoover_damm, if you use that, then leakiness is solved
[2012-06-15 00:40:43 -0400] yfeldblum: hoover_damm, unfortunately, recipe_eval doesn't solve the problem of marking the provider's resource as updated-by-the-last-action; so you'll have to sort of extend recipe_eval to help you with that, i suppose
[2012-06-15 00:50:39 -0400] yfeldblum: hoover_damm, something like this: https://gist.github.com/d85be145f3ff824ccc07
[2012-06-15 00:54:29 -0400] hoover_damm: yfeldblum, neat thanks :)
[2012-06-15 00:56:44 -0400] yfeldblum: hoover_damm, no probs
[2012-06-15 00:57:21 -0400] yfeldblum: hoover_damm, kinda ticked at most lightweight providers out there acting exactly like definitions, and not acting like providers ...
[2012-06-15 00:59:22 -0400] hoover_damm: but I have a bit of code to write and ponder and document
[2012-06-15 00:59:59 -0400] hoover_damm: and nothing but that.
[2012-06-15 01:00:01 -0400] hoover_damm: heh
